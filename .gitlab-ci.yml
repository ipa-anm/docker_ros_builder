variables:
  DOCKER_BUILDKIT: 1
  DOCKER_TLS_CERTDIR: ""
  SUFFIX: ""
  PREFIX: "${CI_REGISTRY_IMAGE}/${CI_PIPELINE_ID}:"
  FOLDER: ${CI_JOB_NAME}
  NAME: ${CI_JOB_NAME}
  TARGET_LATEST: ${CI_REGISTRY_IMAGE}/${CI_JOB_NAME}:latest
  TARGET_BRANCH: ${CI_REGISTRY_IMAGE}/${CI_JOB_NAME}:${CI_COMMIT_REF_NAME//\//-}

services:
  - docker:dind

default:
  tags:
    - docker-build

stages:
  - builder
  - publish
  - cleanup

.common:
  docker_login:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

.build:
  stage: ${CI_JOB_NAME}
  script:
    - TARGET=${CI_REGISTRY_IMAGE}/${NAME}:${CI_COMMIT_REF_NAME//\//-}; docker build --cache-from $TARGET --cache-from $TARGET_LATEST --cache-from $TARGET_BRANCH --build-arg SUFFIX --build-arg PREFIX --build-arg ROS_DISTRO -t ${PREFIX}${NAME}${SUFFIX} ${FOLDER}
  after_script:
    - docker push ${PREFIX}${NAME}${SUFFIX}

builder:
  extends: .build
  stage: builder
  before_script:
    - !reference [.common, docker_login]

.publish:
  stage: publish
  before_script:
    - !reference [.common, docker_login]
    - docker pull ${PREFIX}${NAME}${SUFFIX}
  script:
    - echo "${CI_REGISTRY_IMAGE}/${NAME}:${CI_COMMIT_REF_NAME//\//-}"
    - TARGET=${CI_REGISTRY_IMAGE}/${RENAME}:${CI_COMMIT_REF_NAME//\//-}; if [ "$CI_COMMIT_REF_NAME" = "main" ]; then TARGET=$TARGET_LATEST; fi; docker tag ${PREFIX}${NAME}${SUFFIX} ${TARGET} && docker push ${TARGET}
  variables:
    TARGET_LATEST: ${CI_REGISTRY_IMAGE}/${NAME}:latest

publish:builder:
  extends: .publish
  variables:
    NAME: builder
    RENAME: builder

cleanup_job:
  image: alpine:latest
  stage: cleanup
  before_script:
    - apk add --no-cache curl
    - apk add jq
  script:
    - >
      curl -H "PRIVATE-TOKEN: $API_TOKEN" "https://gitlab.cc-asp.fraunhofer.de/api/v4/projects/${CI_PROJECT_ID}/registry/repositories" > output.json
    - >
      image_id=$(jq --arg CI_PIPELINE_ID "$CI_PIPELINE_ID" '.[] | select(.name==$CI_PIPELINE_ID) | .id' output.json)
    - |
      if [[ ! -z "$image_id" ]]; then
        curl --request DELETE -H "PRIVATE-TOKEN: $API_TOKEN" "https://gitlab.cc-asp.fraunhofer.de/api/v4/projects/${CI_PROJECT_ID}/registry/repositories/${image_id}"
      fi
  when: always
